"""
WolfDB web service
(c) Olivier Friard

flask blueprint for scats management
"""



import flask
from flask import Flask, render_template, redirect, request, Markup, flash, session, current_app
import psycopg2
import psycopg2.extras
from config import config

from scat import Scat
import functions as fn
import utm
import json
import pathlib as pl
import pandas as pd
import numpy as np
import uuid

app = flask.Blueprint("scats", __name__, template_folder="templates")

app.debug = True


params = config()

ALLOWED_EXTENSIONS = [".TSV"]
EXCEL_ALLOWED_EXTENSIONS = [".XLSX", ".ODS"]
UPLOAD_FOLDER = "/tmp"

@app.route("/scats")
def scats():
    return render_template("scats.html")




@app.route("/wa_form", methods=("POST",))
def wa_form():

    data = request.form

    return f"""
<form action="/add_wa" method="POST" style="padding-top:30px; padding-bottom:30px">

  <input type="hidden" id="scat_id" name="scat_id" value="{request.form['scat_id']}">

  <div class="form-group">
  <label for="usr">WA code</label>
  <input type="text" class="form-control" id="wa" name="wa">
</div>

<button type="submit" class="btn btn-primary">Add code</button>
</form>
"""


@app.route("/add_wa", methods=("POST",))
def add_wa():

    connection = fn.get_connection()
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute("UPDATE scats SET wa_code = %s WHERE scat_id = %s",
                   [request.form['wa'].upper(), request.form['scat_id']])

    connection.commit()
    return redirect(f"/view_scat/{request.form['scat_id']}")







@app.route("/view_scat/<scat_id>")
def view_scat(scat_id):
    connection = fn.get_connection()
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute("SELECT *, ST_AsGeoJSON(geo) AS lonlat FROM scats WHERE scat_id = %s",
                   [scat_id])
    results = cursor.fetchone()

    '''
    print(results['lonlat'], type(results['lonlat']))
    '''
    scat_geojson = json.loads(results["lonlat"])
    '''
    print(geojson, type(geojson))
    '''

    lon_lat = scat_geojson['coordinates']
    results["lonlat"] = f"{lon_lat[0]}, {lon_lat[1]}"

    # transect
    '''
    print(results["path_id"])
    transect_id = "_".join(results["path_id"].split("_")[:-1])
    print(transect_id)
    cursor.execute("SELECT ST_AsGeoJSON(points) AS transect_geojson FROM transects WHERE transect_id = %s",
                   [transect_id])
    transect = cursor.fetchone()

    transect_geojson = json.loads(transect["transect_geojson"])
    '''



    transect_geojson = {'type': 'LineString', 'coordinates': [[8.29553, 44.518919999], [8.29562, 44.518849999], [8.29573, 44.518809999], [8.295824, 44.518738999], [8.295921, 44.518670999], [8.296017, 44.518610999], [8.296103, 44.518542999], [8.29621, 44.518497999], [8.296307, 44.518429999], [8.296382, 44.518384999], [8.296479, 44.518308999], [8.296576, 44.518248999], [8.296662, 44.518195999], [8.29679, 44.518135999], [8.29685, 44.518079999], [8.296951, 44.518021999], [8.297027, 44.517953999], [8.297113, 44.517893999], [8.297209, 44.517817999], [8.297317, 44.517734999], [8.297414, 44.517651999], [8.2975, 44.517590999], [8.297618, 44.517522999], [8.297682, 44.517477999], [8.29764, 44.517416999], [8.297567, 44.517316999], [8.297526, 44.517217999], [8.297484, 44.517133999], [8.297453, 44.517026999], [8.297433, 44.516926999], [8.297391, 44.516858999], [8.29736, 44.516789999], [8.297276, 44.516704999], [8.297181, 44.516628999], [8.297086, 44.516551999], [8.297013, 44.516467999], [8.29695, 44.516382999], [8.296887, 44.516290999], [8.296803, 44.516198999], [8.29672, 44.516129999], [8.29668, 44.516049999], [8.296508, 44.515937999], [8.296487, 44.515853999], [8.296499, 44.515754999], [8.296522, 44.515663999], [8.296587, 44.515564999], [8.296598, 44.515496999], [8.296621, 44.515404999], [8.296643, 44.515298999], [8.296666, 44.515207999], [8.296688, 44.515115999], [8.296721, 44.515001999], [8.296744, 44.514887999], [8.296799, 44.514781999], [8.296821, 44.514712999], [8.296896, 44.514629999], [8.296951, 44.514530999], [8.297026, 44.514431999], [8.297059, 44.514370999], [8.297124, 44.514279999], [8.297157, 44.514219999], [8.297233, 44.514128999], [8.297201, 44.514089999], [8.297148, 44.514074999], [8.297042, 44.514043999], [8.296957, 44.514027999], [8.29684, 44.514003999], [8.296702, 44.513972999], [8.296574, 44.513948999], [8.296425, 44.513924999], [8.296287, 44.513901999], [8.29617, 44.513869999], [8.296043, 44.513853999], [8.295904, 44.513822999], [8.295777, 44.513806999], [8.295649, 44.513782999], [8.29551, 44.513749999], [8.29539, 44.513759999], [8.295224, 44.513696999], [8.295172, 44.513574999], [8.29512, 44.513489999], [8.29512, 44.513399999], [8.295228, 44.513338999], [8.295368, 44.513285999], [8.295517, 44.513225999], [8.295689, 44.513173999], [8.295806, 44.513151999], [8.295934, 44.513136999], [8.29603, 44.513122999], [8.29614, 44.513079999], [8.29626, 44.513029999], [8.29625, 44.512929999], [8.29626, 44.512809999], [8.29616, 44.512739999], [8.29603, 44.512669999], [8.29592, 44.512589999], [8.29583, 44.512509999], [8.29622, 44.512339999], [8.29642, 44.512319999], [8.29659, 44.512229999], [8.29669, 44.512139999], [8.29682, 44.512079999], [8.29693, 44.512009999], [8.29704, 44.511939999], [8.29718, 44.511909999], [8.29731, 44.511859999], [8.2974, 44.511779999], [8.29743, 44.511689999], [8.2975, 44.511609999], [8.2976, 44.511549999], [8.29776, 44.511499999], [8.2979, 44.511479999], [8.29803, 44.511439999], [8.2982, 44.511439999], [8.29833, 44.511399999], [8.29847, 44.511359999], [8.29859, 44.511329999], [8.29873, 44.511289999], [8.29885, 44.511259999], [8.29893, 44.511189999], [8.29884, 44.511139999], [8.29869, 44.511149999], [8.29854, 44.511159999], [8.2984, 44.511159999], [8.29826, 44.511189999], [8.29811, 44.511179999], [8.29796, 44.511169999], [8.29783, 44.511159999], [8.29769, 44.511129999], [8.29754, 44.511119999], [8.29744, 44.511159999], [8.29731, 44.511189999], [8.29717, 44.511219999], [8.29704, 44.511239999], [8.29691, 44.511269999], [8.29679, 44.511309999], [8.29658, 44.511329999], [8.29643, 44.511329999], [8.2963, 44.511339999], [8.29617, 44.511379999], [8.29603, 44.511379999], [8.29591, 44.511409999], [8.29577, 44.511379999], [8.29565, 44.511319999], [8.29552, 44.511289999], [8.29539, 44.511279999], [8.29526, 44.511269999], [8.29512, 44.511239999], [8.29499, 44.511199999], [8.29486, 44.511179999], [8.29474, 44.511149999], [8.29464, 44.511099999], [8.29458, 44.511129999], [8.29444, 44.511109999], [8.29431, 44.511069999], [8.29416, 44.511039999], [8.29404, 44.511019999], [8.29392, 44.510929999], [8.29382, 44.510889999], [8.29375, 44.510829999], [8.29358, 44.510829999], [8.29345, 44.510819999], [8.2933, 44.511009999], [8.29321, 44.511099999], [8.29311, 44.511169999], [8.292869, 44.511112999], [8.292817, 44.511021999], [8.292807, 44.510937999], [8.292776, 44.510860999], [8.292745, 44.510830999], [8.29266, 44.510753999], [8.292606, 44.510844999], [8.292531, 44.510882999], [8.292466, 44.510927999], [8.29235, 44.510949999], [8.292264, 44.510964999], [8.29212, 44.510999999], [8.291996, 44.511054999], [8.291858, 44.511068999], [8.291751, 44.511083999], [8.291634, 44.511074999], [8.291495, 44.511073999], [8.291389, 44.511073999], [8.29126, 44.511079999], [8.29113, 44.511099999], [8.29102, 44.511099999], [8.2909, 44.511089999], [8.29082, 44.511069999], [8.290686, 44.511038999], [8.290569, 44.510999999], [8.290463, 44.510976999], [8.290325, 44.510959999], [8.290186, 44.510974999], [8.2901, 44.511034999], [8.289993, 44.511095999], [8.289928, 44.511178999], [8.289873, 44.511284999], [8.289819, 44.511391999], [8.289775, 44.511490999], [8.289731, 44.511581999], [8.289677, 44.511672999], [8.289655, 44.511763999], [8.289589, 44.511862999], [8.289535, 44.511968999], [8.289481, 44.512052999], [8.289437, 44.512166999], [8.289414, 44.512250999], [8.28937, 44.512356999], [8.289369, 44.512448999], [8.289358, 44.512531999], [8.289314, 44.512600999], [8.289239, 44.512645999], [8.289048, 44.512621999], [8.289038, 44.512537999], [8.289081, 44.512461999], [8.289125, 44.512377999], [8.289126, 44.512332999], [8.289009, 44.512293999], [8.288923, 44.512361999], [8.288858, 44.512406999], [8.288762, 44.512474999], [8.288655, 44.512527999], [8.28852, 44.512509999], [8.28841, 44.512489999], [8.28828, 44.512449999], [8.28816, 44.512439999], [8.288038, 44.512439999], [8.287909, 44.512492999], [8.287834, 44.512575999], [8.287779, 44.512666999], [8.287725, 44.512712999], [8.287662, 44.512696999], [8.287545, 44.512642999], [8.287396, 44.512618999], [8.287279, 44.512633999], [8.287119, 44.512639999], [8.286991, 44.512669999], [8.286863, 44.512691999], [8.286767, 44.512698999], [8.286617, 44.512720999], [8.2865, 44.512727999], [8.286362, 44.512711999], [8.28623, 44.512719999], [8.28609, 44.512719999], [8.285904, 44.512723999], [8.285796, 44.512776999], [8.285721, 44.512844999], [8.285624, 44.512897999], [8.285538, 44.512965999], [8.285442, 44.513025999], [8.285324, 44.513070999], [8.285228, 44.513115999], [8.285121, 44.513153999], [8.284971, 44.513213999], [8.284864, 44.513250999], [8.284746, 44.513334999], [8.284649, 44.513417999], [8.284584, 44.513447999], [8.284466, 44.513507999], [8.284381, 44.513545999], [8.284242, 44.513567999], [8.284125, 44.513574999], [8.284029, 44.513581999], [8.283901, 44.513595999], [8.283752, 44.513586999], [8.283634, 44.513624999], [8.283527, 44.513661999], [8.283431, 44.513714999], [8.283334, 44.513752999], [8.283196, 44.513766999], [8.283068, 44.513750999], [8.28294, 44.513729999], [8.282759, 44.513717999], [8.282631, 44.513747999], [8.282556, 44.513808999], [8.282459, 44.513876999], [8.282362, 44.513951999], [8.28234, 44.514065999], [8.282285, 44.514172999], [8.28223, 44.514278999], [8.282208, 44.514354999], [8.282122, 44.514407999], [8.28209, 44.514460999], [8.282025, 44.514521999], [8.282013, 44.514605999], [8.281991, 44.514704999], [8.281968, 44.514803999], [8.28201, 44.514902999], [8.282062, 44.515001999], [8.282157, 44.515086999], [8.28223, 44.515170999], [8.282293, 44.515239999], [8.282293, 44.515292999], [8.28226, 44.515369999], [8.282227, 44.515437999], [8.282183, 44.515520999], [8.282118, 44.515589999], [8.282086, 44.515665999], [8.282031, 44.515733999], [8.281998, 44.515817999], [8.281955, 44.515877999], [8.281911, 44.515969999], [8.281878, 44.516045999], [8.281856, 44.516128999], [8.281823, 44.516220999], [8.281769, 44.516280999], [8.281651, 44.516318999], [8.28151, 44.516339999], [8.281448, 44.516415999], [8.281414, 44.516568999], [8.281445, 44.516659999], [8.28137, 44.516705999], [8.281305, 44.516780999], [8.28123, 44.516818999], [8.281186, 44.516894999], [8.281132, 44.516932999], [8.281036, 44.517000999], [8.28095, 44.517075999], [8.280853, 44.517151999], [8.280788, 44.517212999], [8.28067, 44.517264999], [8.280552, 44.517347999], [8.280508, 44.517423999], [8.28039, 44.517459999], [8.280285, 44.517430999], [8.280136, 44.517383999], [8.28003, 44.517321999], [8.27993, 44.517289999], [8.27979, 44.517269999], [8.279648, 44.517235999], [8.27952, 44.517219999], [8.27941, 44.517199999], [8.27927, 44.517169999], [8.27914, 44.517159999], [8.278988, 44.517147999], [8.27885, 44.517154999], [8.278816, 44.517260999], [8.278826, 44.517329999], [8.278762, 44.517389999], [8.27869, 44.517429999], [8.278579, 44.517518999], [8.278472, 44.517578999], [8.278375, 44.517623999], [8.2783, 44.517669999], [8.278204, 44.517714999], [8.27806, 44.517769999], [8.277946, 44.517834999], [8.277818, 44.517902999], [8.277743, 44.517932999], [8.277646, 44.517992999], [8.277528, 44.518045999], [8.277432, 44.518098999], [8.27729, 44.518119999], [8.277166, 44.518073999], [8.277039, 44.518011999], [8.276911, 44.517965999], [8.276827, 44.517888999], [8.276731, 44.517864999], [8.276636, 44.517841999], [8.276508, 44.517802999], [8.27636, 44.517755999], [8.276232, 44.517732999], [8.276115, 44.517708999], [8.275988, 44.517669999], [8.275893, 44.517630999], [8.275786, 44.517599999], [8.27568, 44.517576999], [8.27558, 44.517539999], [8.27549, 44.517469999], [8.275405, 44.517452999], [8.275225, 44.517375999], [8.27517, 44.517512999], [8.275115, 44.517603999], [8.275082, 44.517709999], [8.275049, 44.517785999], [8.275038, 44.517816999], [8.275069, 44.517869999], [8.274963, 44.517853999], [8.274856, 44.517845999], [8.274739, 44.517882999], [8.274664, 44.517889999], [8.274589, 44.517912999], [8.274504, 44.517919999], [8.274408, 44.517934999], [8.27429, 44.517959999], [8.27416, 44.517959999], [8.27404, 44.517949999], [8.27391, 44.517929999], [8.27378, 44.517899999], [8.273652, 44.517860999], [8.27354, 44.517819999], [8.273419, 44.517790999], [8.273313, 44.517744999], [8.273196, 44.517705999], [8.273058, 44.517696999], [8.272951, 44.517688999], [8.272845, 44.517703999], [8.27261, 44.517693999], [8.272494, 44.517662999], [8.272398, 44.517623999], [8.272292, 44.517569999], [8.272176, 44.517531999], [8.272059, 44.517484999], [8.271964, 44.517438999], [8.271836, 44.517399999], [8.271741, 44.517375999], [8.27158, 44.517349999], [8.27144, 44.517319999], [8.27129, 44.517299999], [8.271145, 44.517288999], [8.270985, 44.517287999], [8.270836, 44.517301999], [8.27069, 44.517329999], [8.27055, 44.517339999], [8.27041, 44.517329999], [8.27027, 44.517329999], [8.270154, 44.517327999], [8.27, 44.517319999], [8.26987, 44.517319999], [8.26971, 44.517319999], [8.2696, 44.517319999], [8.269515, 44.517308999], [8.269355, 44.517284999], [8.269228, 44.517268999], [8.2691, 44.517229999], [8.268994, 44.517198999], [8.268877, 44.517167999], [8.26875, 44.517120999], [8.268623, 44.517089999], [8.268506, 44.517050999], [8.2684, 44.517009999], [8.268262, 44.516934999], [8.268178, 44.516888999], [8.268051, 44.516826999], [8.267945, 44.516757999], [8.267881, 44.516726999], [8.26785, 44.516659999], [8.267839, 44.516695999], [8.267755, 44.516641999], [8.26768, 44.516649999], [8.26755, 44.516659999], [8.26743, 44.516619999], [8.26732, 44.516579999], [8.2672, 44.516529999], [8.2671, 44.516489999], [8.26698, 44.516429999], [8.26687, 44.516359999], [8.26676, 44.516319999], [8.26655, 44.516329999], [8.2664, 44.516299999], [8.26626, 44.516289999], [8.26606, 44.516259999], [8.2659, 44.516249999], [8.26577, 44.516249999], [8.26559, 44.516219999], [8.2654, 44.516189999], [8.26524, 44.516199999], [8.26513, 44.516269999], [8.26499, 44.516299999], [8.26485, 44.516299999], [8.26474, 44.516339999], [8.26468, 44.516419999], [8.26462, 44.516509999], [8.26453, 44.516569999], [8.26443, 44.516639999], [8.26434, 44.516699999], [8.26421, 44.516749999], [8.26408, 44.516799999], [8.26401, 44.516889999], [8.26388, 44.516909999], [8.26378, 44.516989999], [8.26367, 44.517059999], [8.26356, 44.517109999], [8.26347, 44.517169999], [8.26337, 44.517239999], [8.26327, 44.517299999], [8.26315, 44.517339999], [8.26302, 44.517369999], [8.2629, 44.517419999], [8.26278, 44.517479999], [8.26267, 44.517529999], [8.26257, 44.517599999], [8.262403, 44.517704999], [8.26237, 44.517803999], [8.262359, 44.517879999], [8.262347, 44.517963999], [8.262314, 44.518047999], [8.262291, 44.518161999], [8.262269, 44.518229999], [8.262203, 44.518366999], [8.262159, 44.518503999], [8.262125, 44.518640999], [8.262134, 44.518777999], [8.262101, 44.518884999], [8.262121, 44.518991999], [8.262162, 44.519105999], [8.262214, 44.519197999], [8.262277, 44.519312999], [8.262328, 44.519427999], [8.262381, 44.519518999], [8.262411, 44.519610999], [8.2625, 44.519719999], [8.262568, 44.519832999], [8.262589, 44.519916999], [8.262651, 44.520031999], [8.262692, 44.520145999], [8.26274, 44.520269999], [8.262775, 44.520382999], [8.262805, 44.520482999], [8.262804, 44.520604999], [8.262813, 44.520687999], [8.262812, 44.520809999], [8.26281, 44.520939999], [8.262798, 44.521038999], [8.262776, 44.521122999], [8.262732, 44.521221999], [8.26271, 44.521297999], [8.262677, 44.521380999], [8.262654, 44.521472999], [8.262653, 44.521586999], [8.262673, 44.521700999], [8.262693, 44.521807999], [8.262713, 44.521914999], [8.262765, 44.522006999], [8.26283, 44.522089999], [8.26288, 44.522189999], [8.26299, 44.522279999], [8.26306, 44.522359999], [8.263196, 44.522451999], [8.263259, 44.522535999], [8.263354, 44.522604999], [8.26343, 44.522659999], [8.263672, 44.522690999], [8.26384, 44.522659999], [8.26377, 44.522569999], [8.26372, 44.522469999], [8.26377, 44.522359999], [8.26386, 44.522289999], [8.264, 44.522249999], [8.26415, 44.522259999], [8.26429, 44.522299999], [8.26443, 44.522339999], [8.26456, 44.522369999], [8.2647, 44.522409999], [8.26484, 44.522429999], [8.26498, 44.522399999], [8.2651, 44.522369999], [8.26524, 44.522319999], [8.26534, 44.522289999], [8.26547, 44.522239999], [8.26558, 44.522169999], [8.2657, 44.522119999], [8.26581, 44.522059999], [8.26594, 44.521999999], [8.266121, 44.522005999], [8.266227, 44.522021999], [8.266301, 44.522082999], [8.266386, 44.522151999], [8.266427, 44.522220999], [8.266501, 44.522289999], [8.266553, 44.522358999], [8.266585, 44.522427999], [8.266637, 44.522511999], [8.266678, 44.522595999], [8.266741, 44.522710999], [8.266825, 44.522802999], [8.26693, 44.522887999], [8.267036, 44.522979999], [8.2672, 44.523029999], [8.26735, 44.523069999], [8.2675, 44.523099999], [8.26764, 44.523129999], [8.26776, 44.523159999], [8.26792, 44.523149999], [8.26807, 44.523129999], [8.26821, 44.523109999], [8.26837, 44.523129999], [8.26852, 44.523119999], [8.26866, 44.523109999], [8.26876, 44.523179999], [8.26879, 44.523289999], [8.26884, 44.523389999], [8.26886, 44.523489999], [8.26889, 44.523599999], [8.26891, 44.523699999], [8.26892, 44.523799999], [8.26892, 44.523879999], [8.26893, 44.523979999], [8.26896, 44.524079999], [8.26894, 44.524169999], [8.26889, 44.524259999], [8.26884, 44.524309999], [8.269002, 44.524203999], [8.269046, 44.524127999], [8.269089, 44.524067999], [8.269122, 44.523998999], [8.269166, 44.523915999], [8.269188, 44.523869999], [8.269232, 44.523770999], [8.269232, 44.523694999], [8.269244, 44.523618999], [8.269256, 44.523527999], [8.26929, 44.523390999], [8.269322, 44.523313999], [8.269356, 44.523215999], [8.269399, 44.523131999], [8.269444, 44.523009999], [8.269529, 44.522957999], [8.26962, 44.522939999], [8.26973, 44.522929999], [8.26985, 44.522875999], [8.269978, 44.522845999], [8.270107, 44.522808999], [8.270192, 44.522793999], [8.270363, 44.522756999], [8.27048, 44.522759999], [8.27053, 44.522679999], [8.27052, 44.522579999], [8.27049, 44.522479999], [8.27048, 44.522389999], [8.27049, 44.522299999], [8.27052, 44.522199999], [8.27053, 44.522099999], [8.27053, 44.521999999], [8.27059, 44.521919999], [8.27068, 44.521969999], [8.27072, 44.522069999], [8.27077, 44.522169999], [8.27082, 44.522269999], [8.27089, 44.522349999], [8.27095, 44.522449999], [8.27101, 44.522529999], [8.27106, 44.522609999], [8.27113, 44.522699999], [8.27124, 44.522669999], [8.27127, 44.522579999], [8.27129, 44.522479999], [8.2713, 44.522379999], [8.27129, 44.522289999], [8.27128, 44.522199999], [8.2713, 44.522099999], [8.27132, 44.521999999], [8.27141, 44.521969999], [8.27148, 44.522059999], [8.27153, 44.522139999], [8.27161, 44.522229999], [8.271647, 44.522330999], [8.271678, 44.522421999], [8.271709, 44.522505999], [8.271718, 44.522597999], [8.27176, 44.522666999], [8.271791, 44.522719999], [8.27182, 44.522779999], [8.27183, 44.522859999], [8.27184, 44.522949999], [8.27186, 44.523029999], [8.27189, 44.523119999], [8.271967, 44.523170999], [8.272062, 44.523217999], [8.272157, 44.523271999], [8.272263, 44.523317999], [8.272401, 44.523371999], [8.272507, 44.523402999], [8.27263, 44.523429999], [8.27277, 44.523429999], [8.27292, 44.523429999], [8.27307, 44.523419999], [8.27321, 44.523429999], [8.273327, 44.523431999], [8.273498, 44.523424999], [8.273615, 44.523417999], [8.273744, 44.523387999], [8.27387, 44.523369999], [8.273947, 44.523297999], [8.274001, 44.523237999], [8.274077, 44.523161999], [8.274173, 44.523100999], [8.27434, 44.523049999], [8.27447, 44.523009999], [8.27457, 44.522979999], [8.27471, 44.522949999], [8.27482, 44.522929999], [8.27494, 44.522899999], [8.27504, 44.522793999], [8.275126, 44.522725999], [8.275212, 44.522650999], [8.27532, 44.522597999], [8.275406, 44.522544999], [8.275576, 44.522576999], [8.275661, 44.522592999], [8.27578, 44.522579999], [8.275896, 44.522555999], [8.276024, 44.522525999], [8.276131, 44.522480999], [8.276259, 44.522443999], [8.276366, 44.522398999], [8.276495, 44.522345999], [8.276623, 44.522285999], [8.276752, 44.522233999], [8.276859, 44.522195999], [8.276977, 44.522143999], [8.277105, 44.522105999], [8.27721, 44.522089999], [8.277339, 44.522122999], [8.277435, 44.522176999], [8.277551, 44.522207999], [8.27766, 44.522239999], [8.277796, 44.522209999], [8.277925, 44.522126999], [8.278012, 44.522042999], [8.278087, 44.522005999], [8.278139, 44.522074999], [8.27816, 44.522135999], [8.278169, 44.522219999], [8.278211, 44.522310999], [8.278252, 44.522395999], [8.278272, 44.522486999], [8.278303, 44.522570999], [8.278345, 44.522654999], [8.278376, 44.522754999], [8.278375, 44.522845999], [8.278469, 44.522930999], [8.27864, 44.522879999], [8.27877, 44.522859999], [8.2789, 44.522849999], [8.27903, 44.522839999], [8.27915, 44.522829999], [8.27926, 44.522859999], [8.27922, 44.522949999], [8.27913, 44.523019999], [8.27906, 44.523089999], [8.27897, 44.523159999], [8.27888, 44.523229999], [8.278731, 44.523289999], [8.278677, 44.523381999], [8.278665, 44.523502999], [8.278611, 44.523578999], [8.278535, 44.523685999], [8.27847, 44.523768999], [8.278426, 44.523836999], [8.27846, 44.523889999], [8.278574, 44.523929999], [8.27867, 44.523960999], [8.278754, 44.524021999], [8.278817, 44.524083999], [8.27888, 44.524175999], [8.278943, 44.524259999], [8.278985, 44.524335999], [8.279016, 44.524397999], [8.279047, 44.524481999], [8.279067, 44.524565999], [8.279077, 44.524649999], [8.279044, 44.524702999], [8.27899, 44.524769999], [8.27891, 44.524829999], [8.27884, 44.524909999], [8.27877, 44.524989999], [8.27873, 44.525079999], [8.278687, 44.525164999], [8.278665, 44.525248999], [8.278642, 44.525332999], [8.27856, 44.525379999], [8.27847, 44.525449999], [8.278385, 44.525483999], [8.27826, 44.525549999], [8.27817, 44.525599999], [8.27825, 44.525659999], [8.27836, 44.525689999], [8.27848, 44.525709999], [8.278552, 44.525773999], [8.278561, 44.525857999], [8.278592, 44.525949999], [8.278602, 44.526010999], [8.27859, 44.526086999], [8.278579, 44.526139999], [8.278525, 44.526192999], [8.27846, 44.526291999], [8.278405, 44.526420999], [8.278457, 44.526520999], [8.27851, 44.526589999], [8.278594, 44.526658999], [8.278667, 44.526750999], [8.278709, 44.526819999], [8.278751, 44.526895999], [8.27875, 44.526979999], [8.278748, 44.527093999], [8.278779, 44.527177999], [8.278906, 44.527254999], [8.279002, 44.527286999], [8.279108, 44.527309999], [8.27923, 44.527339999], [8.27934, 44.527339999], [8.279459, 44.527395999], [8.279576, 44.527419999], [8.279724, 44.527473999], [8.27987, 44.527449999], [8.27998, 44.527439999], [8.28009, 44.527369999], [8.28029, 44.527389999], [8.28037, 44.527479999], [8.2805, 44.527559999], [8.28065, 44.527629999], [8.28081, 44.527639999], [8.28095, 44.527689999], [8.28109, 44.527719999], [8.28123, 44.527739999], [8.28137, 44.527709999], [8.28151, 44.527699999], [8.28165, 44.527679999], [8.28174, 44.527589999], [8.28184, 44.527529999], [8.28194, 44.527499999], [8.28206, 44.527479999], [8.28222, 44.527539999], [8.28233, 44.527569999], [8.28244, 44.527519999], [8.28254, 44.527459999], [8.28265, 44.527419999], [8.28273, 44.527329999], [8.28282, 44.527269999], [8.28288, 44.527179999], [8.28298, 44.527109999], [8.28308, 44.527069999], [8.28318, 44.526989999], [8.28323, 44.526909999], [8.28323, 44.527019999], [8.28319, 44.527109999], [8.28317, 44.527199999], [8.28318, 44.527299999], [8.28318, 44.527389999], [8.28317, 44.527479999], [8.28311, 44.527579999], [8.28305, 44.527669999], [8.28297, 44.527739999], [8.28295, 44.527799999], [8.28307, 44.527789999], [8.28319, 44.527739999], [8.28332, 44.527799999], [8.28344, 44.527839999], [8.283587, 44.527871999], [8.283715, 44.527879999], [8.283789, 44.527918999], [8.283831, 44.527972999], [8.283895, 44.528010999], [8.28399, 44.528049999], [8.284086, 44.528049999], [8.284182, 44.528004999], [8.28428, 44.527969999], [8.28436, 44.527899999], [8.28443, 44.527839999], [8.284547, 44.527808999], [8.284664, 44.527824999], [8.28479, 44.527829999], [8.28489, 44.527859999], [8.285026, 44.527849999], [8.28517, 44.527839999], [8.285303, 44.527844999], [8.28543, 44.527819999], [8.28556, 44.527779999], [8.28567, 44.527729999], [8.2858, 44.527699999], [8.28592, 44.527659999], [8.28605, 44.527619999], [8.28617, 44.527569999], [8.2863, 44.527549999], [8.28644, 44.527509999], [8.28655, 44.527479999], [8.28668, 44.527439999], [8.28679, 44.527399999], [8.28686, 44.527369999], [8.28697, 44.527349999], [8.28708, 44.527309999], [8.28719, 44.527269999], [8.287272, 44.527185999], [8.287369, 44.527109999], [8.287423, 44.527041999], [8.28752, 44.526989999], [8.2876, 44.526909999], [8.28767, 44.526829999], [8.28776, 44.526769999], [8.28791, 44.526719999], [8.28802, 44.526689999], [8.288131, 44.526634999], [8.288174, 44.526588999], [8.288228, 44.526535999], [8.28831, 44.526499999], [8.288326, 44.526422999], [8.288337, 44.526338999], [8.28835, 44.526201999], [8.28834, 44.526102999], [8.288362, 44.526018999], [8.28844, 44.525959999], [8.288492, 44.525889999], [8.28861, 44.525814999], [8.288685, 44.525806999], [8.288791, 44.525830999], [8.28889, 44.525879999], [8.289025, 44.525862999], [8.289153, 44.525840999], [8.289303, 44.525795999], [8.289421, 44.525750999], [8.289453, 44.525697999], [8.289486, 44.525636999], [8.28953, 44.525560999], [8.289584, 44.525469999], [8.289638, 44.525408999], [8.289681, 44.525332999], [8.289778, 44.525242999], [8.289897, 44.525151999], [8.289972, 44.525075999], [8.289984, 44.525014999], [8.289974, 44.524945999], [8.289965, 44.524816999], [8.289976, 44.524732999], [8.289957, 44.524610999], [8.289968, 44.524526999], [8.290001, 44.524450999], [8.290024, 44.524366999], [8.290056, 44.524298999], [8.2901, 44.524192999], [8.290059, 44.524062999], [8.290093, 44.523940999], [8.290147, 44.523841999], [8.290159, 44.523757999], [8.290192, 44.523666999], [8.290225, 44.523567999], [8.290247, 44.523499999], [8.290259, 44.523400999], [8.290292, 44.523331999], [8.290303, 44.523270999], [8.290347, 44.523172999], [8.29038, 44.523080999], [8.290413, 44.523012999], [8.290467, 44.522936999], [8.290575, 44.522845999], [8.29065, 44.522800999], [8.29077, 44.522789999], [8.290895, 44.522817999], [8.291012, 44.522817999], [8.29113, 44.522788999], [8.29127, 44.522769999], [8.2914, 44.522739999], [8.291493, 44.522668999], [8.291579, 44.522600999], [8.291687, 44.522547999], [8.291815, 44.522487999], [8.29188, 44.522442999], [8.291966, 44.522358999], [8.292041, 44.522275999], [8.292117, 44.522214999], [8.292182, 44.522146999], [8.292257, 44.522055999], [8.292354, 44.521972999], [8.29243, 44.521889999], [8.292494, 44.521828999], [8.292581, 44.521729999], [8.292667, 44.521646999], [8.292711, 44.521570999], [8.292765, 44.521487999], [8.292808, 44.521403999], [8.292874, 44.521312999], [8.292928, 44.521236999], [8.292982, 44.521160999], [8.293058, 44.521077999], [8.293144, 44.520994999], [8.293208, 44.520933999], [8.293295, 44.520842999], [8.293381, 44.520743999], [8.293457, 44.520645999], [8.293543, 44.520569999], [8.293619, 44.520493999], [8.293705, 44.520418999], [8.293791, 44.520342999], [8.293867, 44.520251999], [8.293953, 44.520183999], [8.294028, 44.520107999], [8.294114, 44.520024999], [8.294201, 44.519948999], [8.294265, 44.519865999], [8.294384, 44.519759999], [8.294481, 44.519668999], [8.294567, 44.519638999], [8.294674, 44.519578999], [8.29476, 44.519525999], [8.294846, 44.519441999], [8.29492, 44.519379999], [8.29503, 44.519339999], [8.29514, 44.519259999], [8.29523, 44.519189999], [8.29533, 44.519129999], [8.29543, 44.519059999], [8.29552, 44.518989999], [8.29555, 44.518959999]]}



    return render_template("view_scat.html",
                           results=results,
                           #map=Markup(fn.leaflet_point(lon_lat, scat_id))
                           map=Markup(fn.leaflet_geojson([scat_geojson, transect_geojson]))
                           )



@app.route("/scats_list")
def scats_list():
    # get all scats

    connection = fn.get_connection()
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute("SELECT * FROM scats ORDER BY scat_id")

    return render_template("scats_list.html",
                           results=cursor.fetchall())


@app.route("/new_scat", methods=("GET", "POST"))
def new_scat():

    def not_valid(msg):
        # default values
        default_values = {}
        for k in request.form:
            default_values[k] = request.form[k]

        flash(Markup(f"<b>{msg}</b>"))

        return render_template("new_scat.html",
                            title="New scat",
                            action=f"/new_scat",
                            form=form,
                            default_values=default_values)


    if request.method == "GET":
        form = Scat()
        # get id of all paths
        form.path_id.choices = [("", "")] + [(x, x) for x in fn.all_path_id()]
        # get id of all snow tracks
        form.snowtrack_id.choices = [("", "")] + [(x, x) for x in fn.all_snow_tracks_id()]

        return render_template("new_scat.html",
                               title="New scat",
                               action=f"/new_scat",
                               form=form,
                               default_values={"coord_zone": "32N"})

    if request.method == "POST":
        form = Scat(request.form)

        # get id of all transects
        form.path_id.choices = [("", "")] + [(x, x) for x in fn.all_path_id()]

        # get id of all snow tracks
        form.snowtrack_id.choices = [("", "")] + [(x, x) for x in fn.all_snow_tracks_id()]

        if form.validate():

            # date
            try:
                year = int(request.form['scat_id'][1:2+1]) + 2000
                month = int(request.form['scat_id'][3:4+1])
                day = int(request.form['scat_id'][5:6+1])
                date = f"{year}-{month}-{day}"
            except Exception:
                return not_valid("The scat_id value is not correct")

            # region
            scat_region = fn.get_region(request.form["province"])

            # UTM coord conversion
            coord_latlon = utm.to_latlon(int(request.form["coord_east"]), int(request.form["coord_north"]), int(request.form["coord_zone"].replace("N", "")), "N")

            connection = fn.get_connection()
            cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

            sql = ("INSERT INTO scats (scat_id, date, sampling_season, sampling_type, path_id, snowtrack_id, "
                   "location, municipality, province, region, "
                   "deposition, matrix, collected_scat, scalp_category, "
                   "coord_east, coord_north, coord_zone, "
                   "observer, institution,"
                   "geo) "
                   "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)")
            cursor.execute(sql,
                           [
                            request.form["scat_id"],
                            date,
                            fn.sampling_season(date),
                            request.form["sampling_type"],
                            request.form["path_id"],
                            request.form["snowtrack_id"],
                            request.form["location"], request.form["municipality"], request.form["province"].upper(), scat_region,
                            request.form["deposition"], request.form["matrix"], request.form["collected_scat"], request.form["scalp_category"],
                            request.form["coord_east"], request.form["coord_north"], request.form["coord_zone"],
                            request.form["observer"], request.form["institution"],
                            f"SRID=4326;POINT({coord_latlon[1]} {coord_latlon[0]})"
                           ]
                           )

            connection.commit()

            return redirect("/scats_list")
        else:
            return not_valid("Some values are not set or are wrong. Please check and submit again")



@app.route("/edit_scat/<scat_id>", methods=("GET", "POST"))
def edit_scat(scat_id):

    def not_valid(msg):
            # default values
            default_values = {}
            for k in request.form:
                default_values[k] = request.form[k]

            flash(Markup(f"<b>{msg}</b>"))

            return render_template("new_scat.html",
                                   title="Edit scat",
                                   action=f"/edit_scat/{scat_id}",
                                   form=form,
                                   default_values=default_values)


    if request.method == "GET":
        connection = fn.get_connection()
        cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
        cursor.execute("SELECT * FROM scats WHERE scat_id = %s",
                    [scat_id])
        default_values = cursor.fetchone()

        form = Scat(path_id=default_values["path_id"],
                    snowtrack_id=default_values["snowtrack_id"],
                    sampling_type=default_values["sampling_type"],
                    deposition=default_values["deposition"],
                    matrix=default_values["matrix"],
                    collected_scat=default_values["collected_scat"],
                    scalp_category=default_values["scalp_category"])

        # get id of all paths
        form.path_id.choices = [("", "")] + [(x, x) for x in fn.all_path_id()]
        # get id of all snow tracks
        form.snowtrack_id.choices = [("", "")] + [(x, x) for x in fn.all_snow_tracks_id()]

        return render_template("new_scat.html",
                            title="Edit scat",
                            action=f"/edit_scat/{scat_id}",
                            form=form,
                            default_values=default_values)


    if request.method == "POST":

        form = Scat(request.form)

        # get id of all paths
        form.path_id.choices = [("", "")] + [(x, x) for x in fn.all_path_id()]

        # get id of all snow tracks
        form.snowtrack_id.choices = [("", "")] + [(x, x) for x in fn.all_snow_tracks_id()]

        if form.validate():

            # date
            try:
                year = int(request.form['scat_id'][1:2+1]) + 2000
                month = int(request.form['scat_id'][3:4+1])
                day = int(request.form['scat_id'][5:6+1])
                date = f"{year}-{month:02}-{day:02}"
            except Exception:
                return not_valid("The scat_id value is not correct")

            # region
            scat_region = fn.get_region(request.form["province"])

            # UTM coord conversion
            coord_latlon = utm.to_latlon(int(request.form["coord_east"]), int(request.form["coord_north"]), int(request.form["coord_zone"].replace("N", "")), "N")

            connection = fn.get_connection()
            cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

            sql = ("UPDATE scats SET scat_id = %s, "
                   "                date = %s,"
                   "                sampling_season = %s,"
                   "                sampling_type = %s,"
                   "                path_id = %s, "
                   "                snowtrack_id = %s, "
                   "                location = %s, "
                   "                municipality = %s, "
                   "                province = %s, "
                   "                region = %s, "
                   "                deposition = %s, "
                   "                matrix = %s, "
                   "                collected_scat = %s, "
                   "                scalp_category = %s, "
                   "                coord_east = %s, "
                   "                coord_north = %s, "
                   "                coord_zone = %s, "
                   "                observer = %s, "
                   "                institution = %s, "
                   "                geo = %s "
                   "WHERE scat_id = %s")
            cursor.execute(sql,
                           [
                            request.form["scat_id"],
                            date,
                            fn.sampling_season(date),
                            request.form["sampling_type"],
                            request.form["path_id"],
                            request.form["snowtrack_id"],
                            request.form["location"], request.form["municipality"], request.form["province"], scat_region,
                            request.form["deposition"], request.form["matrix"], request.form["collected_scat"], request.form["scalp_category"],
                            request.form["coord_east"], request.form["coord_north"], request.form["coord_zone"],
                            request.form["observer"], request.form["institution"],
                            f"SRID=4326;POINT({coord_latlon[1]} {coord_latlon[0]})",
                            scat_id
                           ]
                           )

            connection.commit()

            return redirect(f"/view_scat/{scat_id}")
        else:
            return not_valid("Some values are not set or are wrong. Please check and submit again")


@app.route("/del_scat/<scat_id>")
def del_scat(scat_id):
    connection = fn.get_connection()
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute("DELETE FROM scats WHERE scat_id = %(scat_id)s",
                   {"scat_id": scat_id})
    connection.commit()
    return redirect("/scats_list")



def extract_data_from_tsv(filename):
    """
    Extract and check data from a TSV file
    """

    try:
        df = pd.read_csv(pl.Path(UPLOAD_FOLDER) / pl.Path(filename), sep="\t")
    except Exception:
        return True, fn.alert_danger(f"Error reading the file. Check your TSV file"), {}

    # check columns
    for column in ['scat_id', 'date', 'wa_code', 'genotype_id', 'sampling_type', 'transect_id', 'snowtrack_id',
                    'location', 'municipality', 'province',
                    'deposition', 'matrix', 'collected_scat', 'scalp_category',
                    'genetic_sample',
                    'coord_east', 'coord_north', 'coord_zone',
                    'operator', 'institution']:
        if column not in list(df.columns):
            return True, fn.alert_danger(f"Column {column} is missing"), {}

    all_data = {}
    for index, row in df.iterrows():
        data = {}
        for column in list(df.columns):
            data[column] = row[column]
            if isinstance(data[column], float) and str(data[column]) == "nan":
                data[column] = ""

        # date
        try:
            year = int(data['scat_id'][1:2+1]) + 2000
            month = int(data['scat_id'][3:4+1])
            day = int(data['scat_id'][5:6+1])
            date = f"{year}-{month}-{day}"
        except Exception:
            return True, fn.alert_danger(f"The scat ID is not valid at row {index + 1}: {data['scat_id']}"), {}

        # check date
        if date != data["date"].strip():
            return True, fn.alert_danger(f"Check the scat ID and the date at row {index + 1}: {data['scat_id']}  {data['date']}"), {}

        # path_id
        path_id = data['transect_id'] + "_" + date[2:].replace("-", "")
        data["path_id"] = path_id

        # region
        scat_region = fn.get_region(data["province"])
        data["region"] = scat_region

        # UTM coord conversion
        try:
            coord_latlon = utm.to_latlon(int(data["coord_east"]), int(data["coord_north"]), int(data["coord_zone"].replace("N", "")), "N")
        except Exception:
            return True, fn.alert_danger(f'Check the UTM coordinates at row {index + 1}: {data["coord_east"]} {data["coord_north"]} {data["coord_zone"]}'), {}
        data["coord_latlon"] = f"SRID=4326;POINT({coord_latlon[1]} {coord_latlon[0]})"

        # sampling_type
        if data["sampling_type"].upper().strip() not in ["OPPORTUNISTIC", "SYSTEMATIC"]:
            return True, fn.alert_danger(f'Sampling type must be <b>Opportunistic</b> or <b>Systematic</b> at row {index + 1}'), {}

        # deposition
        if data["deposition"].upper().strip() == "FRESCA":
            data["deposition"] = "Fresh"
        if data["deposition"].upper().strip() == "VECCHIA":
            data["deposition"] = "Old"
        if data["deposition"].upper().strip() not in ["FRESH", "OLD"]:
            return True, fn.alert_danger(f'The deposition must be <b>fresh</b> or <b>old</b> at row {index + 1}'), {}

        # collected_scat
        if data["collected_scat"].upper().strip() == "SI":
            data["collected_scat"] = "Yes"
        if data["collected_scat"].upper().strip() == "NO":
            data["collected_scat"] = "No"
        if data["collected_scat"].upper().strip() not in ["YES", "NO"]:
            return True, fn.alert_danger(f'The collected_scat must be <b>Yes</b> or <b>No</b> at row {index + 1}'), {}

        # matrix
        if data["matrix"].upper().strip() == "SI":
            data["matrix"] = "Yes"
        if data["matrix"].upper().strip() == "NO":
            data["matrix"] = "No"

        if data["matrix"].upper().strip() not in ["YES", "NO"]:
            return True, fn.alert_danger(f'The matrix must be <b>Yes</b> or <b>No</b> at row {index + 1}')

        all_data[index] = dict(data)

    return False, "", all_data


@app.route("/load_scats_tsv", methods=("GET", "POST",))
def load_scats_tsv():

    if request.method == "GET":
        return render_template("load_scats_tsv.html")

    if request.method == "POST":

        new_file = request.files["new_file"]

        # check file extension
        if pl.Path(new_file.filename).suffix.upper() not in ALLOWED_EXTENSIONS:
            flash(fn.alert_danger("The uploaded file does not have an allowed extension (must be <b>.tsv</b>)"))
            return redirect(f"/load_scats_tsv")

        try:
            filename = str(uuid.uuid4())
            new_file.save(pl.Path(UPLOAD_FOLDER) / pl.Path(filename))
        except Exception:
            flash(fn.alert_danger("Error with the uploaded file"))
            return redirect(f"/load_scats_tsv")

        r, msg, all_data = extract_data_from_tsv(filename)
        if r:
            flash(msg)
            return redirect(f"/load_scats_tsv")

        else:
            # check if scat_id already in DB
            connection = fn.get_connection()
            cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
            scats_list = "','".join([all_data[idx]['scat_id'] for idx in all_data])
            sql = f"select scat_id from scats where scat_id in ('{scats_list}')"
            cursor.execute(sql)
            scats_to_update = [row["scat_id"] for row in cursor.fetchall()]

            return render_template("confirm_load_scats_tsv.html",
                                   n_scats = len(all_data),
                                   n_scats_to_update=scats_to_update,
                                   all_data=all_data,
                                   filename=filename)


@app.route("/confirm_load/<filename>/<mode>")
def confirm_load(filename, mode):

    if mode not in ["new", "all"]:
        flash(fn.alert_danger("Error: mode not allowed"))
        return redirect(f"/load_scats_tsv")

    r, msg, all_data = extract_data_from_tsv(filename)
    if r:
        flash(msg)
        return redirect(f"/load_scats_tsv")

    connection = fn.get_connection()
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

    # check if scat_id already in DB
    scats_list = "','".join([all_data[idx]['scat_id'] for idx in all_data])
    sql = f"select scat_id from scats where scat_id in ('{scats_list}')"
    cursor.execute(sql)
    scats_to_update = [row["scat_id"] for row in cursor.fetchall()]

    sql = ("UPDATE scats SET scat_id = %(scat_id)s, "
            "                date = %(date)s,"
            "                wa_code = %(wa_code)s,"
            "                genotype_id = %(genotype_id)s,"
            "                sampling_season = %(sampling_season)s,"
            "                sampling_type = %(sampling_type)s,"
            "                path_id = %(path_id)s, "
            "                snowtrack_id = %(snowtrack_id)s, "
            "                location = %(location)s, "
            "                municipality = %(municipality)s, "
            "                province = %(province)s, "
            "                region = %(region)s, "
            "                deposition = %(deposition)s, "
            "                matrix = %(matrix)s, "
            "                collected_scat = %(collected_scat)s, "
            "                scalp_category = %(scalp_category)s, "
            "                coord_east = %(coord_east)s, "
            "                coord_north = %(coord_north)s, "
            "                coord_zone = %(coord_zone)s, "
            "                observer = %(operator)s, "
            "                institution = %(institution)s, "
            "                geo = %(geo)s "
            "WHERE scat_id = %(scat_id)s;"

            "INSERT INTO scats (scat_id, date, wa_code, genotype_id, sampling_season, sampling_type, path_id, snowtrack_id, "
            "location, municipality, province, region, "
            "deposition, matrix, collected_scat, scalp_category, "
            "coord_east, coord_north, coord_zone, "
            "observer, institution,"
            "geo) "
            "SELECT %(scat_id)s, %(date)s, %(wa_code)s, %(genotype_id)s, "
            " %(sampling_season)s, %(sampling_type)s, %(path_id)s, %(snowtrack_id)s, "
            "%(location)s, %(municipality)s, %(province)s, %(region)s, %(deposition)s, %(matrix)s, %(collected_scat)s, %(scalp_category)s, "
            " %(coord_east)s, %(coord_north)s, %(coord_zone)s, %(operator)s, %(institution)s, %(geo)s "
            "WHERE NOT EXISTS (SELECT 1 FROM scats WHERE scat_id = %(scat_id)s)"
            )
    count_added = 0
    count_updated = 0
    for idx in all_data:
        data = dict(all_data[idx])

        if mode == "new" and (data["scat_id"] in scats_to_update):
            continue
        if data["scat_id"] in scats_to_update:
            count_updated += 1
        else:
            count_added += 1

        cursor.execute(sql,
                        {"scat_id": data["scat_id"].strip(),
                        "date": data["date"],
                        "wa_code": data["wa_code"].strip(),
                        "genotype_id": data["genotype_id"].strip(),
                        "sampling_season": fn.sampling_season(data["date"]),
                        "sampling_type": data["sampling_type"].strip(),
                        "path_id": data["path_id"],
                        "snowtrack_id": data["snowtrack_id"].strip(),
                        "location": data["location"].strip(), "municipality": data["municipality"].strip(),
                        "province": data["province"].strip().upper(), "region": data["region"],
                        "deposition": data["deposition"], "matrix": data["matrix"].strip(),
                        "collected_scat": data["collected_scat"].strip(), "scalp_category": data["scalp_category"].strip(),
                        "coord_east": data["coord_east"], "coord_north": data["coord_north"], "coord_zone": data["coord_zone"].strip(),
                        "operator": data["operator"].strip(),   "institution": data["institution"].strip(),
                        "geo": data["coord_latlon"],
                        }
                        )
    connection.commit()

    msg = f"TSV file successfully loaded. {count_added} scats added, {count_updated} scats updated."
    flash(fn.alert_success(msg))

    return redirect(f'/scats')















def extract_data_from_xlsx(filename):
    """
    Extract and check data from a XLSX file
    """

    if pl.Path(filename).suffix == ".XLSX":
        engine = "openpyxl"
    if pl.Path(filename).suffix == ".ODS":
        engine = "odf"

    try:
        df = pd.read_excel(pl.Path(UPLOAD_FOLDER) / pl.Path(filename), engine=engine)
    except Exception:
        return True, fn.alert_danger(f"Error reading the file. Check your XLSX/ODS file"), {}

    # check columns
    for column in ['scat_id', 'date', 'wa_code', 'genotype_id', 'sampling_type', 'transect_id', 'snowtrack_id',
                    'location', 'municipality', 'province',
                    'deposition', 'matrix', 'collected_scat', 'scalp_category',
                    'genetic_sample',
                    'coord_east', 'coord_north', 'coord_zone',
                    'operator', 'institution']:
        if column not in list(df.columns):
            return True, fn.alert_danger(f"Column {column} is missing"), {}

    all_data = {}
    for index, row in df.iterrows():
        data = {}
        for column in list(df.columns):
            data[column] = row[column]
            if isinstance(data[column], float) and str(data[column]) == "nan":
                data[column] = ""

        # date
        try:
            year = int(data['scat_id'][1:2+1]) + 2000
            month = int(data['scat_id'][3:4+1])
            day = int(data['scat_id'][5:6+1])
            date = f"{year}-{month}-{day}"
        except Exception:
            return True, fn.alert_danger(f"The scat ID is not valid at row {index + 1}: {data['scat_id']}"), {}

        # check date
        try:
            date_from_file = str(data["date"]).split(" ")[0].strip()
        except Exception:
            date_from_file = ""
        if date != date_from_file:
            return True, fn.alert_danger(f"Check the scat ID and the date at row {index + 1}: {data['scat_id']}  {date_from_file}"), {}

        data["date"] = date_from_file

        # path_id
        path_id = data['transect_id'] + "_" + date[2:].replace("-", "")
        data["path_id"] = path_id

        # region
        scat_region = fn.get_region(data["province"])
        data["region"] = scat_region

        # UTM coord conversion
        try:
            coord_latlon = utm.to_latlon(int(data["coord_east"]), int(data["coord_north"]), int(data["coord_zone"].replace("N", "")), "N")
        except Exception:
            return True, fn.alert_danger(f'Check the UTM coordinates at row {index + 1}: {data["coord_east"]} {data["coord_north"]} {data["coord_zone"]}'), {}
        data["coord_latlon"] = f"SRID=4326;POINT({coord_latlon[1]} {coord_latlon[0]})"

        # sampling_type
        if data["sampling_type"].upper().strip() not in ["OPPORTUNISTIC", "SYSTEMATIC"]:
            return True, fn.alert_danger(f'Sampling type must be <b>Opportunistic</b> or <b>Systematic</b> at row {index + 1}'), {}

        # deposition
        if data["deposition"].upper().strip() == "FRESCA":
            data["deposition"] = "Fresh"
        if data["deposition"].upper().strip() == "VECCHIA":
            data["deposition"] = "Old"
        if data["deposition"].upper().strip() not in ["FRESH", "OLD"]:
            return True, fn.alert_danger(f'The deposition must be <b>fresh</b> or <b>old</b> at row {index + 1}'), {}

        # collected_scat
        if data["collected_scat"].upper().strip() == "SI":
            data["collected_scat"] = "Yes"
        if data["collected_scat"].upper().strip() == "NO":
            data["collected_scat"] = "No"
        if data["collected_scat"].upper().strip() not in ["YES", "NO"]:
            return True, fn.alert_danger(f'The collected_scat must be <b>Yes</b> or <b>No</b> at row {index + 1}'), {}

        # matrix
        if data["matrix"].upper().strip() == "SI":
            data["matrix"] = "Yes"
        if data["matrix"].upper().strip() == "NO":
            data["matrix"] = "No"

        if data["matrix"].upper().strip() not in ["YES", "NO"]:
            return True, fn.alert_danger(f'The matrix must be <b>Yes</b> or <b>No</b> at row {index + 1}')

        all_data[index] = dict(data)

    return False, "", all_data






@app.route("/load_scats_xlsx", methods=("GET", "POST",))
def load_scats_xlsx():

    if request.method == "GET":
        return render_template("load_scats_xlsx.html")

    if request.method == "POST":

        new_file = request.files["new_file"]

        # check file extension
        if pl.Path(new_file.filename).suffix.upper() not in EXCEL_ALLOWED_EXTENSIONS:
            flash(fn.alert_danger("The uploaded file does not have an allowed extension (must be <b>.xlsx</b> or <b>.ods</b>)"))
            return redirect(f"/load_scats_xlsx")

        try:
            filename = str(uuid.uuid4()) + str(pl.Path(new_file.filename).suffix.upper())
            new_file.save(pl.Path(UPLOAD_FOLDER) / pl.Path(filename))
        except Exception:
            flash(fn.alert_danger("Error with the uploaded file"))
            return redirect(f"/load_scats_xlsx")

        r, msg, all_data = extract_data_from_xlsx(filename)
        if r:
            flash(msg)
            return redirect(f"/load_scats_xlsx")

        else:
            # check if scat_id already in DB
            connection = fn.get_connection()
            cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)
            scats_list = "','".join([all_data[idx]['scat_id'] for idx in all_data])
            sql = f"select scat_id from scats where scat_id in ('{scats_list}')"
            cursor.execute(sql)
            scats_to_update = [row["scat_id"] for row in cursor.fetchall()]

            return render_template("confirm_load_scats_xlsx.html",
                                   n_scats = len(all_data),
                                   n_scats_to_update=scats_to_update,
                                   all_data=all_data,
                                   filename=filename)


@app.route("/confirm_load_xlsx/<filename>/<mode>")
def confirm_load_xlsx(filename, mode):

    if mode not in ["new", "all"]:
        flash(fn.alert_danger("Error: mode not allowed"))
        return redirect(f"/load_scats_xlsx")

    r, msg, all_data = extract_data_from_xlsx(filename)
    if r:
        flash(msg)
        return redirect(f"/load_scats_xlsx")

    connection = fn.get_connection()
    cursor = connection.cursor(cursor_factory=psycopg2.extras.DictCursor)

    # check if scat_id already in DB
    scats_list = "','".join([all_data[idx]['scat_id'] for idx in all_data])
    sql = f"select scat_id from scats where scat_id in ('{scats_list}')"
    cursor.execute(sql)
    scats_to_update = [row["scat_id"] for row in cursor.fetchall()]

    sql = ("UPDATE scats SET scat_id = %(scat_id)s, "
            "                date = %(date)s,"
            "                wa_code = %(wa_code)s,"
            "                genotype_id = %(genotype_id)s,"
            "                sampling_season = %(sampling_season)s,"
            "                sampling_type = %(sampling_type)s,"
            "                path_id = %(path_id)s, "
            "                snowtrack_id = %(snowtrack_id)s, "
            "                location = %(location)s, "
            "                municipality = %(municipality)s, "
            "                province = %(province)s, "
            "                region = %(region)s, "
            "                deposition = %(deposition)s, "
            "                matrix = %(matrix)s, "
            "                collected_scat = %(collected_scat)s, "
            "                scalp_category = %(scalp_category)s, "
            "                coord_east = %(coord_east)s, "
            "                coord_north = %(coord_north)s, "
            "                coord_zone = %(coord_zone)s, "
            "                observer = %(operator)s, "
            "                institution = %(institution)s, "
            "                geo = %(geo)s "
            "WHERE scat_id = %(scat_id)s;"

            "INSERT INTO scats (scat_id, date, wa_code, genotype_id, sampling_season, sampling_type, path_id, snowtrack_id, "
            "location, municipality, province, region, "
            "deposition, matrix, collected_scat, scalp_category, "
            "coord_east, coord_north, coord_zone, "
            "observer, institution,"
            "geo) "
            "SELECT %(scat_id)s, %(date)s, %(wa_code)s, %(genotype_id)s, "
            " %(sampling_season)s, %(sampling_type)s, %(path_id)s, %(snowtrack_id)s, "
            "%(location)s, %(municipality)s, %(province)s, %(region)s, %(deposition)s, %(matrix)s, %(collected_scat)s, %(scalp_category)s, "
            " %(coord_east)s, %(coord_north)s, %(coord_zone)s, %(operator)s, %(institution)s, %(geo)s "
            "WHERE NOT EXISTS (SELECT 1 FROM scats WHERE scat_id = %(scat_id)s)"
            )
    count_added = 0
    count_updated = 0
    for idx in all_data:
        data = dict(all_data[idx])

        if mode == "new" and (data["scat_id"] in scats_to_update):
            continue
        if data["scat_id"] in scats_to_update:
            count_updated += 1
        else:
            count_added += 1

        cursor.execute(sql,
                        {"scat_id": data["scat_id"].strip(),
                        "date": data["date"],
                        "wa_code": data["wa_code"].strip(),
                        "genotype_id": data["genotype_id"].strip(),
                        "sampling_season": fn.sampling_season(data["date"]),
                        "sampling_type": data["sampling_type"].strip(),
                        "path_id": data["path_id"],
                        "snowtrack_id": data["snowtrack_id"].strip(),
                        "location": data["location"].strip(), "municipality": data["municipality"].strip(),
                        "province": data["province"].strip().upper(), "region": data["region"],
                        "deposition": data["deposition"], "matrix": data["matrix"].strip(),
                        "collected_scat": data["collected_scat"].strip(), "scalp_category": data["scalp_category"].strip(),
                        "coord_east": data["coord_east"], "coord_north": data["coord_north"], "coord_zone": data["coord_zone"].strip(),
                        "operator": data["operator"].strip(),   "institution": data["institution"].strip(),
                        "geo": data["coord_latlon"],
                        }
                        )
    connection.commit()

    msg = f"XLSX/ODS file successfully loaded. {count_added} scats added, {count_updated} scats updated."
    flash(fn.alert_success(msg))

    return redirect(f'/scats')




'''
https://stackoverflow.com/questions/1109061/insert-on-duplicate-update-in-postgresql

            INSERT INTO the_table (id, column_1, column_2)
VALUES (1, 'A', 'X'), (2, 'B', 'Y'), (3, 'C', 'Z')
ON CONFLICT (id) DO UPDATE
  SET column_1 = excluded.column_1,
      column_2 = excluded.column_2;



      UPDATE table SET field='C', field2='Z' WHERE id=3;
INSERT INTO table (id, field, field2)
       SELECT 3, 'C', 'Z'
       WHERE NOT EXISTS (SELECT 1 FROM table WHERE id=3);

'''

